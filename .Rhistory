"hist.mutual.information.bin7", "hist.mutual.information.bin8", "hist.mutual.information.bin9", "hist.mutual.information.bin10",
"hist.res.symb.pair.mutual.information.bin1", "hist.res.symb.pair.mutual.information.bin2", "hist.res.symb.pair.mutual.information.bin3", "hist.res.symb.pair.mutual.information.bin4", "hist.res.symb.pair.mutual.information.bin5", "hist.res.symb.pair.mutual.information.bin6",
"hist.res.symb.pair.mutual.information.bin7", "hist.res.symb.pair.mutual.information.bin8", "hist.res.symb.pair.mutual.information.bin9", "hist.res.symb.pair.mutual.information.bin10",
#CORRELATION
"avg.abs.attr.correlation", "min.abs.attr.correlation", "max.abs.attr.correlation","sd.abs.attr.correlation", "var.abs.attr.correlation",
"hist.attr.correlation.bin1","hist.attr.correlation.bin2","hist.attr.correlation.bin3","hist.attr.correlation.bin4","hist.attr.correlation.bin5","hist.attr.correlation.bin6","hist.attr.correlation.bin7","hist.attr.correlation.bin8","hist.attr.correlation.bin9","hist.attr.correlation.bin10",
#MIC
"avg.attr.mic","min.attr.mic","max.attr.mic","var.attr.mic","sd.attr.mic","hist.attr.mic.bin1","hist.attr.mic.bin2","hist.attr.mic.bin3","hist.attr.mic.bin4","hist.attr.mic.bin5","hist.attr.mic.bin6","hist.attr.mic.bin7","hist.attr.mic.bin8","hist.attr.mic.bin9","hist.attr.mic.bin10",
#GAIN RATIO
"gain.ratio.weights.avg","gain.ratio.weights.max" ,"gain.ratio.weights.min",
"gain.ratio.weights.var", "gain.ratio.weights.sd", "gain.ratio.weights.hist1",
"gain.ratio.weights.hist2", "gain.ratio.weights.hist3", "gain.ratio.weights.hist4",
"gain.ratio.weights.hist5", "gain.ratio.weights.hist6", "gain.ratio.weights.hist7",
"gain.ratio.weights.hist8", "gain.ratio.weights.hist9", "gain.ratio.weights.hist10",
#SKEWNESS
"avg.abs.skewness", "max.abs.skewness","min.abs.skewness","sd.abs.skewness","var.abs.skewness",
"skewness.hist1", "skewness.hist2", "skewness.hist3", "skewness.hist4", "skewness.hist5",
"skewness.hist6", "skewness.hist7", "skewness.hist8", "skewness.hist9", "skewness.hist10",
#ETA
"eta.avg", "eta.max","eta.min","eta.sd","eta.var",
"eta.hist1", "eta.hist2", "eta.hist3", "eta.hist4", "eta.hist5",
"eta.hist6", "eta.hist7", "eta.hist8", "eta.hist9", "eta.hist10",
"eta.pair.avg", "eta.pair.max","eta.pair.min","eta.pair.sd","eta.pair.var",
"eta.pair.hist1", "eta.pair.hist2", "eta.pair.hist3", "eta.pair.hist4", "eta.pair.hist5",
"eta.pair.hist6", "eta.pair.hist7", "eta.pair.hist8", "eta.pair.hist9", "eta.pair.hist10",
#INTERACTION INFORMATION
"avg.attr.trio.interinfo","min.attr.trio.interinfo","max.attr.trio.interinfo","var.attr.trio.interinfo","sd.attr.trio.interinfo","hist.attr.trio.interinfo.bin1","hist.attr.trio.interinfo.bin2","hist.attr.trio.interinfo.bin3","hist.attr.trio.interinfo.bin4","hist.attr.trio.interinfo.bin5","hist.attr.trio.interinfo.bin6","hist.attr.trio.interinfo.bin7","hist.attr.trio.interinfo.bin8","hist.attr.trio.interinfo.bin9","hist.attr.trio.interinfo.bin10",
"avg.attr.class.trio.interinfo","min.attr.class.trio.interinfo","max.attr.class.trio.interinfo","var.attr.class.trio.interinfo","sd.attr.class.trio.interinfo","hist.attr.class.trio.interinfo.bin1","hist.attr.class.trio.interinfo.bin2","hist.attr.class.trio.interinfo.bin3","hist.attr.class.trio.interinfo.bin4","hist.attr.class.trio.interinfo.bin5","hist.attr.class.trio.interinfo.bin6","hist.attr.class.trio.interinfo.bin7","hist.attr.class.trio.interinfo.bin8","hist.attr.class.trio.interinfo.bin9","hist.attr.class.trio.interinfo.bin10",
"nb.landmarker.interinfo", "dstump.landmarker_d1.interinfo", "dstump.landmarker_d2.interinfo", "dstump.landmarker_d3.interinfo","classmajority.landmarker.interinfo",
#OVERLAPPING
"avg.r_value", "max.r_value", "min.r_value", "var.r_value", "sd.r_value", "r_value.hist1", "r_value.hist2", "r_value.hist3", "r_value.hist4",
"r_value.hist5", "r_value.hist6", "r_value.hist7", "r_value.hist8", "r_value.hist9", "r_value.hist10"
)
metafeatures
metafeatures
kCompleteClassificationGSI
kCompleteClassificationGSI$measures
metafeatures
metafeatures
devtools::use_data(metafeatures)
library(autobagging)
m <- autobagging(Species~., iris)
load("../metamodel/")
load("../metamodel/metamodel.RData")
library(xgboost)
ls()
meta.model
m
library(xgboost)
xgboost::xgb.load("../metamodel/xgboost.model")
ls()
meta.model
m
metam2 <- xgboost::xgb.load("../metamodel/xgboost.model")
metam2
metam2
summary(metam2)
str(../metamodel/xgboost.model)
str(metam2)
metam2 <- xgboost::xgb.load("../metamodel/xgboost.model")
devtools::use_data(metam2)
MaxMinMetafeatures
devtools::document()
naiveBayes
library(autobagging)
meta.example <- meta.dataframe(iris, metafeatures)
warnings()
library(xgboost)
xgb.load("metam2")
xgb.load(metam2)
metam2
data("metam2")
metam2
xgb.load(metam2)
ls()
rm(list=ls())
meta.example <- meta.dataframe(iris, metafeatures)
library(autobagging)
meta.example <- meta.dataframe(iris, metafeatures)
meta.model <- xgb.load(metam2)
library(xgboost)
meta.model <- xgb.load(metam2)
meta.model <- xgb.load(data("metam2"))
meta.model <- xgb.load(a<-data("metam2"))
a<-data("metam2")
meta.model <- xgb.load(a)
a
metam2
xgb.load(metam2)
load("~/Dropbox/AutoFuckingBagging/package/metamodel/workflows.RData")
ls()
devtools::use_data(workflows)
load("~/Dropbox/AutoFuckingBagging/package/metamodel/metafeatures.RData")
ls()
devtools::use_data(metafeatures)
load("~/Dropbox/AutoFuckingBagging/package/metamodel/max_min_metafeatures.RData")
ls()
devtools::use_data(MaxMinMetafeatures)
load("~/Dropbox/AutoFuckingBagging/package/metamodel/avgRankMatrix.RData")
ls()
devtools::use_data(avgRankMatrix)
library(xgboost)
metamodel <- xgb.load("../metamodel/xgboost.model")
metamodel
devtools::use_data(metamodel)
library(autobagging)
library(autobagging)
rm(list=ls())
m <- baggedtrees(form = Species ~., data = iris, ntree = 100)
abmodel(m, Species ~., iris, "ola")
M <- bagging(Species ~.,
iris,
ntrees = 100,
pruning = "none",
dselection = "ola")
Mauto <- autobagging(Species ~., iris)
meta.example <- meta.dataframe(iris, metafeatures)
meta.example
metafeatures
meta.dataframe(iris, metafeatures)
load("../metamodel/metafeatures.RData")
metafeatures
source('../metafeatures/metafeatures_to_compute.R')
ls()
metafeatures
metafeatures_names<-metafeatures
devtools::use_data(metafeatures_names)
rm(list=ls())
meta.example <- meta.dataframe(iris, metafeatures_names)
meta.example
for (i in names(meta.example)) {
max_value <- MaxMinMetafeatures[MaxMinMetafeatures[ ,1] == i, 2]
min_value <- MaxMinMetafeatures[MaxMinMetafeatures[ ,1] == i, 3]
meta.example[[i]] <-  ifelse(is.finite(normalize01(meta.example[[i]], max_value, min_value)), normalize01(meta.example[[i]], max_value, min_value), -1)
}
meta.example
meta.example <- t(as.data.frame(unlist(meta.example)))
meta.example
meta.example <- meta.example[,colnames(metafeatures)]
colnames(metafeatures)
meta.example
meta.example[colnames(metafeatures)]
meta.example
str(meta.example)
as.vector(meta.example)
names(meta.example)
meta.example
colnames(meta.example)
names_metaex <- colnames(meta.example)
meta.example <- as.vector(meta.example)
meta.example
names(meta.example) <- names_metaex
meta.example
meta.example[,colnames(metafeatures)]
colnames(metafeatures)
meta.example[colnames(metafeatures)]
meta.example <- meta.example[colnames(metafeatures)]
data("metamodel")
meta.model <- xgb.load(metamodel)
unlist(meta.example)
t(as.data.frame(unlist(meta.example)))
cbind(workflows, t(as.data.frame(unlist(meta.example))))
metadataset <- cbind(workflows, t(as.data.frame(unlist(meta.example))))
metadataset <- cbind(metadataset, predict(meta.model, metadataset)$predictions)
load("../metamodel/Xtest.RData")
Xtest
head(Xtest)
dim(Xtest)
devtools::use_data()
devtools::use_data(Xtest)
library(autobagging)
Mauto <- autobagging(Species ~., iris)
xgb.DMatrix
autobagging
library(autobagging)
Mauto <- autobagging(Species ~., iris)
warnings()
library(autobagging)
rm(list=ls())
ls()
Mauto <- autobagging(Species ~., iris)
library(autobagging)
Mauto <- autobagging(Species ~., iris)
library(autobagging)
Mauto <- autobagging(Species ~., iris)
RecWF1
RecWF1
str(RecWF1)
RecWF1$meta.pred <- NULL
RecWF1
unlist(RecWF1)
as.list(RecWF1)
str(RecWF1)
str(as.list(RecWF1))
a <- as.list(RecWF1)
a[a == 1]
a <- a[a == 1]
names(a)
b <- names(a)
b
split_by <- function(expr, split, ...) {
expr <- strsplit(expr, split = split, fixed = TRUE, ...)
unlist(expr, use.names = FALSE)
}
lapply(b, function(o) {
split_by(o, "nTrees|pruningMethods")
})
lapply(b, function(o) {
split_by(o, "^nTrees|^pruningMethods")
})
lapply(b, function(o) {
split_by(o, "^nTrees")
})
b[[1]]
splity_by(b[[1]],"^nTrees")
split_by(b[[1]],"^nTrees")
b[[1]]
library(xgboost)
metamodel <- xgb.load("../metamodel/xgboost.model")
devtools::use_data(metamodel)
library(autobagging)
rm(list=ls())
autobagging(Species ~., iris)
RecWF1
autobagging(Species ~., iris)
RecWF1
load("../metamodel/avgRankMatrix.RData")
devtools::use_data(avgRankMatrix)
load("../metamodel/max_min_metafeatures.RData")
devtools::use_data(MaxMinMetafeatures)
load("../metamodel/metafeatures.RData")
devtools::use_data(metafeatures)
load("../metamodel/workflows.RData")
devtools::use_data(workflows)
library(autobagging)
autobagging(Species ~., iris)
RecWF1
iris
source('../metafeatures/MtL.R')
source('../metafeatures/metafeatures_to_compute.R')
source('../metafeatures/MtL.R')
source('../metafeatures/metafeatures_to_compute.R')
metafeatures
metafeatures_names
setwd("..")
source('./metafeatures/MtL.R')
source('./metafeatures/metafeatures_to_compute.R')
meta.example <- meta.dataframe(iris, metafeatures)
meta.example
library(xgboost)
meta.model <- xgb.load('./metamodel/xgboost.model')
load("./metamodel/max_min_metafeatures.RData")
load("./metamodel/Xtest.RData")
normalize01 <- function(x, max_value, min_value) {
(x - min_value) / (max_value - min_value)
}
for (i in names(meta.example)) {
max_value <- MaxMinMetafeatures[MaxMinMetafeatures[,1] == i, 2]
min_value <- MaxMinMetafeatures[MaxMinMetafeatures[,1] == i, 3]
meta.example[[i]] <-  ifelse(is.finite(normalize01(meta.example[[i]], max_value, min_value)), normalize01(meta.example[[i]], max_value, min_value), -1)
}
meta.example <- t(as.data.frame(unlist(meta.example)))
rownames(meta.example) <- NULL
X <- as.data.frame(matrix(rep(meta.example, 63), nrow=63, ncol=ncol(meta.example), byrow=TRUE))
colnames(X) <- colnames(meta.example)
X <- cbind(X, Xtest)
Xtest <- xgb.DMatrix(data = data.matrix(X), group = 63, missing=-1)
Xtest
meta.pred <- cbind(X, predict(meta.model, Xtest))
colnames(meta.pred)[ncol(meta.pred)] <- c("meta.pred")
meta.pred[which.max(meta.pred$meta.pred), (ncol(meta.pred)-13):ncol(meta.pred)]
source('./metafeatures/MtL.R')
setwd("..")
source('./metafeatures/MtL.R')
source('./metafeatures/metafeatures_to_compute.R')
meta.example <- meta.dataframe(iris, metafeatures)
library(xgboost)
meta.model <- xgb.load('./metamodel/xgboost.model')
load("./metamodel/max_min_metafeatures.RData")
load("./metamodel/Xtest.RData")
normalize01 <- function(x, max_value, min_value) {
(x - min_value) / (max_value - min_value)
}
for (i in names(meta.example)) {
max_value <- MaxMinMetafeatures[MaxMinMetafeatures[,1] == i, 2]
min_value <- MaxMinMetafeatures[MaxMinMetafeatures[,1] == i, 3]
meta.example[[i]] <-  ifelse(is.finite(normalize01(meta.example[[i]], max_value, min_value)), normalize01(meta.example[[i]], max_value, min_value), -1)
}
meta.example <- t(as.data.frame(unlist(meta.example)))
meta.example
rownames(meta.example) <- NULL
meta.example
X <- as.data.frame(matrix(rep(meta.example, 63), nrow=63, ncol=ncol(meta.example), byrow=TRUE))
X
colnames(X) <- colnames(meta.example)
X <- cbind(X, Xtest)
X
Xtest <- xgb.DMatrix(data = data.matrix(X), group = 63, missing=-1)
Xtest
meta.pred <- cbind(X, predict(meta.model, Xtest))
meta.pred
colnames(meta.pred)[ncol(meta.pred)] <- c("meta.pred")
meta.pred[which.max(meta.pred$meta.pred), (ncol(meta.pred)-13):ncol(meta.pred)]
meta.pred
meta.pred
summary(meta.pred)
summary(meta.pred$meta.pred)
meta.pred[which.max(meta.pred$meta.pred), (ncol(meta.pred)-13):ncol(meta.pred)]
source('../metafeatures/MtL.R')
source('../metafeatures/MtL.R')
library(autobagging)
meta.example <- meta.dataframe(iris, metafeatures)
data("metamodel")
meta.model <- xgb.load(metamodel)
library(xgboost)
meta.model <- xgb.load(metamodel)
for (i in colnames(Xtest)[1:143]) {
max_value <- MaxMinMetafeatures[MaxMinMetafeatures[,1] == i, 2]
min_value <- MaxMinMetafeatures[MaxMinMetafeatures[,1] == i, 3]
meta.example[[i]] <-  ifelse(is.finite(normalize01(meta.example[[i]], max_value, min_value)), normalize01(meta.example[[i]], max_value, min_value), -1)
Xtest[,i] <- meta.example[[i]]
}
meta.example
meta.example <- meta.dataframe(iris, metafeatures)
metafeatures
meta.example <- meta.dataframe(iris, metafeatures_names)
meta.example
for (i in colnames(Xtest)[1:143]) {
max_value <- MaxMinMetafeatures[MaxMinMetafeatures[,1] == i, 2]
min_value <- MaxMinMetafeatures[MaxMinMetafeatures[,1] == i, 3]
meta.example[[i]] <-  ifelse(is.finite(normalize01(meta.example[[i]], max_value, min_value)), normalize01(meta.example[[i]], max_value, min_value), -1)
Xtest[,i] <- meta.example[[i]]
}
i
colnames(Xtest)
for (i in colnames(Xtest)[1:143]) {
max_value <- MaxMinMetafeatures[MaxMinMetafeatures[,1] == i, 2]
min_value <- MaxMinMetafeatures[MaxMinMetafeatures[,1] == i, 3]
meta.example[[i]] <-  ifelse(is.finite(normalize01(meta.example[[i]], max_value, min_value)), normalize01(meta.example[[i]], max_value, min_value), -1)
Xtest[,i] <- meta.example[[i]]
}
meta.example <- meta.dataframe(iris, metafeatures_names)
meta.example
source('./metafeatures/metafeatures_to_compute.R')
source('../metafeatures/metafeatures_to_compute.R')
ls()
metafeatures
ls()
min_value
metafeatures
metafeatures_names <- metafeatures
devtools::use_data(metafeatures_names)
devtools::use_data(metafeatures_names, overwrite = TRUE)
load("./metamodel/max_min_metafeatures.RData")
load("../metamodel/max_min_metafeatures.RData")
ls()
MaxMinMetafeatures
devtools::use_data(MaxMinMetafeatures)
devtools::use_data(MaxMinMetafeatures,overwrite = T)
load("./metamodel/Xtest.RData")
load("../metamodel/Xtest.RData")
devtools::use_data(Xtest,overwrite = T)
meta.example <- meta.dataframe(iris, metafeatures)
for (i in colnames(Xtest)[1:143]) {
max_value <- MaxMinMetafeatures[MaxMinMetafeatures[,1] == i, 2]
min_value <- MaxMinMetafeatures[MaxMinMetafeatures[,1] == i, 3]
meta.example[[i]] <-  ifelse(is.finite(normalize01(meta.example[[i]], max_value, min_value)), normalize01(meta.example[[i]], max_value, min_value), -1)
Xtest[,i] <- meta.example[[i]]
}
X <- xgb.DMatrix(data = data.matrix(Xtest),  group = c(63), missing=-1)
X
meta.pred <- cbind(as.data.frame(Xtest), predict(meta.model, X))
colnames(meta.pred)[ncol(meta.pred)] <- c("meta.pred")
meta.pred[which.max(meta.pred$meta.pred), (ncol(meta.pred)-13):ncol(meta.pred)]
meta.model <- xgb.load('../metamodel/xgboost.model')
metamodel <- meta.model
devtools::use_data(metamodel)
devtools::use_data(metamodel, overwrite = T)
library(autobagging)
rm(list=ls())
meta.example <- meta.dataframe(iris, metafeatures_names)
meta.example
library(xgboost)
data("metamodel")
meta.model <- xgb.load(metamodel)
for (i in colnames(Xtest)[1:143]) {
max_value <- MaxMinMetafeatures[MaxMinMetafeatures[,1] == i, 2]
min_value <- MaxMinMetafeatures[MaxMinMetafeatures[,1] == i, 3]
meta.example[[i]] <-  ifelse(is.finite(normalize01(meta.example[[i]], max_value, min_value)), normalize01(meta.example[[i]], max_value, min_value), -1)
Xtest[,i] <- meta.example[[i]]
}
X <- xgb.DMatrix(data = data.matrix(Xtest),  group = c(63), missing=-1)
meta.pred <- cbind(as.data.frame(Xtest), predict(meta.model, X))
colnames(meta.pred)[ncol(meta.pred)] <- c("meta.pred")
meta.pred[which.max(meta.pred$meta.pred), (ncol(meta.pred)-13):ncol(meta.pred)]
rm(list=ls())
autobagging(Species ~., iris)
RecWF1
RecWF1$meta.pred <- NULL
a <- as.list(RecWF1)
a
a <- a[a == 1]
a
b <- names(a)
b
split_by(b[[1]], "^nTrees")
b[[1]]
strsplit(b[[1]])
strsplit(b[[1]], "^nTrees")
strsplit(b[[1]], "^nTrees", fixed = T)
split_by <- function(expr, split, ...) {
expr <- strsplit(expr, split = split, fixed = FALSE, ...)
unlist(expr, use.names = FALSE)
}
strsplit(b[[1]], "^nTrees.|pruningMethods.|pruningCutPoint.|dynamicMethods.")
exprs <- "^nTrees.|pruningMethods.|pruningCutPoint.|dynamicMethods."
lapply(b, function(o) split_by(o, exprs))
lapply(b, function(o) split_by(o, exprs)[2])
b
cleanRecWF <- function(o) {
exprs <- "^nTrees.|pruningMethods.|pruningCutPoint.|dynamicMethods."
o$meta.pred <- NULL
o <- as.list(o)
o_selected <- o[o == 1]
o_methods <- names(o)
methods_vals <- lapply(o_methods, function(j) split_by(j, exprs)[2])
names(methods_vals) <- c("nTrees", "pruningMethods", "pruningCutPoint","dynamicMethods")
methods_vals
}
cleanRecWF(RecWF1)
exprs <- "^nTrees.|pruningMethods.|pruningCutPoint.|dynamicMethods."
o <- RecWF1
o$meta.pred <- NULL
o
o <- as.list(o)
o
cleanRecWF <- function(o) {
exprs <- "^nTrees.|pruningMethods.|pruningCutPoint.|dynamicMethods."
o$meta.pred <- NULL
o <- as.list(o)
o_selected <- o[o == 1]
o_methods <- names(o_selected)
methods_vals <- lapply(o_methods, function(j) split_by(j, exprs)[2])
names(methods_vals) <- c("nTrees", "pruningMethods", "pruningCutPoint","dynamicMethods")
methods_vals
}
cleanRecWF(RecWF1)
cleanRecWF <- function(o) {
exprs <- "^nTrees.|pruningMethods.|pruningCutPoint.|dynamicMethods."
o$meta.pred <- NULL
o <- as.list(o)
o_selected <- o[o == 1]
o_methods <- names(o_selected)
methods_vals <- lapply(o_methods, function(j) split_by(j, exprs)[2])
names(methods_vals) <- c("nTrees", "pruningMethods", "pruningCutPoint","dynamicMethods")
methods_vals$nTrees <- as.numeric(methods_vals$nTrees)
methods_vals$pruningCutPoint <- as.numeric(methods_vals$pruningCutPoint)
methods_vals
}
cleanRecWF(RecWF1)
rm(list=ls())
library(autobagging)
autobagging(Species ~., iris)
RecWF1
library(autobagging)
rm(list=ls())
m<-autobagging(Species ~., iris)
m
length(m@base_models)
m
m@dynamic_selection
cleanRecWF
m
str(m)
class(m)
library(lsr)
aov
etaSquared
etaSquared
library(infotheo)
interinformation
mine
library(minerva)
mine
skewness
library(e1071)
skewness
require(entropy)
mi.empirical
library(autobagging)
lintr::lint_package()
lintr::lint_package()
interinformation
mi.empirical
devtools::document()
devtools::document()
devtools::document()
roxygen2::roxygenize(clean=TRUE)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
combn
devtools::document()
devtools::document()
?data
library(autoBagging)
m <- autoBagging(Species ~., iris)
library(autoBagging)
devtools::document()
library(autoBagging)
devtools::install_github("fhpinto/autoBagging")
